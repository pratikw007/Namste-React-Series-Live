Polyfill

Suppose:  Arrays.map(); // Cant not determine the Browser
We can create our own map function but both the output are same.

What convert our newer code to older code. -- > Bibble

Parcel == Vite (same)

**Babel**
we can configure our project 
parcel will remove the console.log in the project ->> Babel Plugin Transform Remove Control

npm install babel-plugin-transform-remove-console --save-d


in html

<div class="pratik">
    <h2>Hello 01</h2>
    <h2>Hello 02</h2>
</div>

If we Have multiple keys then we will give the keys.

React track this thing as a unique thing.

what is Render ?
Updating something in DOM


 is jsx html inside Javascript :  true or false
 false --> html like syntax but not HTML inside Javascript

const heading1 =(
     <h1 id="title" key="h2">
        Namste React
        </h1>
)

keys ? --> React Track the uniqueness using keys 

How Does the Work in Browser ?



// JSX  - JavaScript XML 
// Facebook Developer Develop JSX.
Bebel is JS Library.
Babel understand the JSX Code What is '<' Brackets.

JSX --> React.createElement --> Object --> HTML(DOM)
    ⬆ 
  Babel - Converting the JSX code into React.createElement

  Advanages of jsx :
  Radability
  Simplicity  

  ------------------------
  Bebel along with parcel that's Bebel is not present in package.json



  React Component
  Two Types of Component 
  -Functional Based Component --> NEW --> We Will Used this
  -Class Based Component --> OLD  

( 1 )  Functional Base Component 
Name starts with the capital letters

if we want to write code in multiple line then we can Add curly braces {}

Just Write your logic inside the curly braces {}

const HeaderComponent = () => {
    return{
        <div><h1>Hello Pratik(Functional component)</h1></div>

    } 
 };

 What is React Element ?
 It is an Object

 Functional ---- >  <Title/> || {Title()} -- > Component Composition
 variable ----> {Title}  --> important



______________________________________________________
import React from "react";  // getting it from node modules
import ReactDOM from "react-dom/client";


// this is Actual React Code 
// const heading = React.createElement(
//     "h1",
//     {
//         id: "title",
//         key:"h2",     
//     },
//     "React is working"
// );


// JSX  - JavaScript XML 
// Facebook Developer Develop JSX
const heading1 =(
     <h1 id="title" key="h2">
        Namste React
        </h1>
)

//React Component
// Functional Component -- New
//  ---> Nothing but the Javascript Function. (Normal Function)
 const HeaderComponent = () => {
       return( 
       <div>
         {heading1}
         {/* We can do mathematical Operation in that just link Console */}
         {2+1}  
         <h1>Hello Pratik</h1>
         <h2>Ram</h2>
         </div>
)
};

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(heading1);
root.render(<HeaderComponent />);

______________________________________________________

18/02/2024
Any piece of JSX Can be only one Parent.

//React Fragment -It is a component which is imported by React.
//no Need to add extra div (inside the root) we can use this .
//jsx only have One Parent
import React from 'react';
const jsx = {
  <React.Fragment>
//  <div>
  <h1>Welcome to React!</h1>
  <h2>Hello React</h2>
  //</div>
</React.Fragment>

//instate of  <React.Fragment></React.Fragment>
//we can use <> </>   || root.render(<>{jsx}</>)
  
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(jsx);


// we can add css inside JSX using Object.
// const styleObj={
  color:"red",
  fontSize:35,
  backgroundColor:'yellow'
  }


const jsx = {  
<div style={styleObj} >
  <h1>Welcome to React!</h1>
  <h2>Hello React</h2>
</div>
}


______________________________________________________
//Config Driven UI  (CDU) --> Some Offer are available for some state so we used CDU.

//props --> Properties -->Passing some data into component
//Passing data inside our component

pass data from parent component to child component.

Parent 
  ↓
child
  
//Props ----> Argument  && Parameter


function fn(para1,para2){ // Parameter

}

fn("XYZ","ABC"); // Argument


//Virtual DOM

<head>
<body>
<Rest 1>
<Rest 2><img>
<Rest 3>
</body>
</footer>

Virtual Dom is not a Dom it is a Representation of DOM.


Reconciliation In React:
-->It will Only rerender the specific portion of the  app that has changed instead of re-rendering the whole application.


